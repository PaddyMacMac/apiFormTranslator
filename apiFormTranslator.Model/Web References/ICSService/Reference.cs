//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace apiFormTranslator.Model.ICSService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ICSServiceSoap", Namespace="http://www.prometric.com/webservices/intelitest")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Folder))]
    public partial class ICSService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private User userField;
        
        private System.Threading.SendOrPostCallback LoadICSFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddICSNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddICSNodeToParentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddICSNodeByPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetICSNodeRootFolderNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditIcsNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveIcsNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetICSNodeRootFolderOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ICSService() {
            this.Url = global::apiFormTranslator.Model.Properties.Settings.Default.apiFormTranslator_Model_icsService_ICSService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public User user {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoadICSFolderCompletedEventHandler LoadICSFolderCompleted;
        
        /// <remarks/>
        public event AddICSNodeCompletedEventHandler AddICSNodeCompleted;
        
        /// <remarks/>
        public event AddICSNodeToParentCompletedEventHandler AddICSNodeToParentCompleted;
        
        /// <remarks/>
        public event AddICSNodeByPathCompletedEventHandler AddICSNodeByPathCompleted;
        
        /// <remarks/>
        public event GetICSNodeRootFolderNameCompletedEventHandler GetICSNodeRootFolderNameCompleted;
        
        /// <remarks/>
        public event EditIcsNodeCompletedEventHandler EditIcsNodeCompleted;
        
        /// <remarks/>
        public event MoveIcsNodeCompletedEventHandler MoveIcsNodeCompleted;
        
        /// <remarks/>
        public event GetICSNodeRootFolderCompletedEventHandler GetICSNodeRootFolderCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("user")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prometric.com/webservices/intelitest/LoadICSFolder", RequestNamespace="http://www.prometric.com/webservices/intelitest", ResponseNamespace="http://www.prometric.com/webservices/intelitest", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ICSNode LoadICSFolder(string folderId) {
            object[] results = this.Invoke("LoadICSFolder", new object[] {
                        folderId});
            return ((ICSNode)(results[0]));
        }
        
        /// <remarks/>
        public void LoadICSFolderAsync(string folderId) {
            this.LoadICSFolderAsync(folderId, null);
        }
        
        /// <remarks/>
        public void LoadICSFolderAsync(string folderId, object userState) {
            if ((this.LoadICSFolderOperationCompleted == null)) {
                this.LoadICSFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadICSFolderOperationCompleted);
            }
            this.InvokeAsync("LoadICSFolder", new object[] {
                        folderId}, this.LoadICSFolderOperationCompleted, userState);
        }
        
        private void OnLoadICSFolderOperationCompleted(object arg) {
            if ((this.LoadICSFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadICSFolderCompleted(this, new LoadICSFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("user")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prometric.com/webservices/intelitest/AddICSNode", RequestNamespace="http://www.prometric.com/webservices/intelitest", ResponseNamespace="http://www.prometric.com/webservices/intelitest", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ICSNode AddICSNode(string parentFolderId, ICSNode icsNode) {
            object[] results = this.Invoke("AddICSNode", new object[] {
                        parentFolderId,
                        icsNode});
            return ((ICSNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddICSNodeAsync(string parentFolderId, ICSNode icsNode) {
            this.AddICSNodeAsync(parentFolderId, icsNode, null);
        }
        
        /// <remarks/>
        public void AddICSNodeAsync(string parentFolderId, ICSNode icsNode, object userState) {
            if ((this.AddICSNodeOperationCompleted == null)) {
                this.AddICSNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddICSNodeOperationCompleted);
            }
            this.InvokeAsync("AddICSNode", new object[] {
                        parentFolderId,
                        icsNode}, this.AddICSNodeOperationCompleted, userState);
        }
        
        private void OnAddICSNodeOperationCompleted(object arg) {
            if ((this.AddICSNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddICSNodeCompleted(this, new AddICSNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("user")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prometric.com/webservices/intelitest/AddICSNodeToParent", RequestNamespace="http://www.prometric.com/webservices/intelitest", ResponseNamespace="http://www.prometric.com/webservices/intelitest", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ICSNode AddICSNodeToParent(string parentFolderId, ICSNode icsNode) {
            object[] results = this.Invoke("AddICSNodeToParent", new object[] {
                        parentFolderId,
                        icsNode});
            return ((ICSNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddICSNodeToParentAsync(string parentFolderId, ICSNode icsNode) {
            this.AddICSNodeToParentAsync(parentFolderId, icsNode, null);
        }
        
        /// <remarks/>
        public void AddICSNodeToParentAsync(string parentFolderId, ICSNode icsNode, object userState) {
            if ((this.AddICSNodeToParentOperationCompleted == null)) {
                this.AddICSNodeToParentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddICSNodeToParentOperationCompleted);
            }
            this.InvokeAsync("AddICSNodeToParent", new object[] {
                        parentFolderId,
                        icsNode}, this.AddICSNodeToParentOperationCompleted, userState);
        }
        
        private void OnAddICSNodeToParentOperationCompleted(object arg) {
            if ((this.AddICSNodeToParentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddICSNodeToParentCompleted(this, new AddICSNodeToParentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("user")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prometric.com/webservices/intelitest/AddICSNodeByPath", RequestNamespace="http://www.prometric.com/webservices/intelitest", ResponseNamespace="http://www.prometric.com/webservices/intelitest", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ICSNode AddICSNodeByPath(string icsPath, string title) {
            object[] results = this.Invoke("AddICSNodeByPath", new object[] {
                        icsPath,
                        title});
            return ((ICSNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddICSNodeByPathAsync(string icsPath, string title) {
            this.AddICSNodeByPathAsync(icsPath, title, null);
        }
        
        /// <remarks/>
        public void AddICSNodeByPathAsync(string icsPath, string title, object userState) {
            if ((this.AddICSNodeByPathOperationCompleted == null)) {
                this.AddICSNodeByPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddICSNodeByPathOperationCompleted);
            }
            this.InvokeAsync("AddICSNodeByPath", new object[] {
                        icsPath,
                        title}, this.AddICSNodeByPathOperationCompleted, userState);
        }
        
        private void OnAddICSNodeByPathOperationCompleted(object arg) {
            if ((this.AddICSNodeByPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddICSNodeByPathCompleted(this, new AddICSNodeByPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("user")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prometric.com/webservices/intelitest/GetICSNodeRootFolderName", RequestNamespace="http://www.prometric.com/webservices/intelitest", ResponseNamespace="http://www.prometric.com/webservices/intelitest", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetICSNodeRootFolderName() {
            object[] results = this.Invoke("GetICSNodeRootFolderName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetICSNodeRootFolderNameAsync() {
            this.GetICSNodeRootFolderNameAsync(null);
        }
        
        /// <remarks/>
        public void GetICSNodeRootFolderNameAsync(object userState) {
            if ((this.GetICSNodeRootFolderNameOperationCompleted == null)) {
                this.GetICSNodeRootFolderNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetICSNodeRootFolderNameOperationCompleted);
            }
            this.InvokeAsync("GetICSNodeRootFolderName", new object[0], this.GetICSNodeRootFolderNameOperationCompleted, userState);
        }
        
        private void OnGetICSNodeRootFolderNameOperationCompleted(object arg) {
            if ((this.GetICSNodeRootFolderNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetICSNodeRootFolderNameCompleted(this, new GetICSNodeRootFolderNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("user")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prometric.com/webservices/intelitest/EditIcsNode", RequestNamespace="http://www.prometric.com/webservices/intelitest", ResponseNamespace="http://www.prometric.com/webservices/intelitest", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EditIcsNode(ICSNode icsNode) {
            object[] results = this.Invoke("EditIcsNode", new object[] {
                        icsNode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EditIcsNodeAsync(ICSNode icsNode) {
            this.EditIcsNodeAsync(icsNode, null);
        }
        
        /// <remarks/>
        public void EditIcsNodeAsync(ICSNode icsNode, object userState) {
            if ((this.EditIcsNodeOperationCompleted == null)) {
                this.EditIcsNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditIcsNodeOperationCompleted);
            }
            this.InvokeAsync("EditIcsNode", new object[] {
                        icsNode}, this.EditIcsNodeOperationCompleted, userState);
        }
        
        private void OnEditIcsNodeOperationCompleted(object arg) {
            if ((this.EditIcsNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditIcsNodeCompleted(this, new EditIcsNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("user")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prometric.com/webservices/intelitest/MoveIcsNode", RequestNamespace="http://www.prometric.com/webservices/intelitest", ResponseNamespace="http://www.prometric.com/webservices/intelitest", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MoveIcsNode(string sourceFolderId, string targetFolderId, string movingElementId) {
            object[] results = this.Invoke("MoveIcsNode", new object[] {
                        sourceFolderId,
                        targetFolderId,
                        movingElementId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MoveIcsNodeAsync(string sourceFolderId, string targetFolderId, string movingElementId) {
            this.MoveIcsNodeAsync(sourceFolderId, targetFolderId, movingElementId, null);
        }
        
        /// <remarks/>
        public void MoveIcsNodeAsync(string sourceFolderId, string targetFolderId, string movingElementId, object userState) {
            if ((this.MoveIcsNodeOperationCompleted == null)) {
                this.MoveIcsNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveIcsNodeOperationCompleted);
            }
            this.InvokeAsync("MoveIcsNode", new object[] {
                        sourceFolderId,
                        targetFolderId,
                        movingElementId}, this.MoveIcsNodeOperationCompleted, userState);
        }
        
        private void OnMoveIcsNodeOperationCompleted(object arg) {
            if ((this.MoveIcsNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveIcsNodeCompleted(this, new MoveIcsNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("user")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.prometric.com/webservices/intelitest/GetICSNodeRootFolder", RequestNamespace="http://www.prometric.com/webservices/intelitest", ResponseNamespace="http://www.prometric.com/webservices/intelitest", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetICSNodeRootFolder() {
            object[] results = this.Invoke("GetICSNodeRootFolder", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetICSNodeRootFolderAsync() {
            this.GetICSNodeRootFolderAsync(null);
        }
        
        /// <remarks/>
        public void GetICSNodeRootFolderAsync(object userState) {
            if ((this.GetICSNodeRootFolderOperationCompleted == null)) {
                this.GetICSNodeRootFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetICSNodeRootFolderOperationCompleted);
            }
            this.InvokeAsync("GetICSNodeRootFolder", new object[0], this.GetICSNodeRootFolderOperationCompleted, userState);
        }
        
        private void OnGetICSNodeRootFolderOperationCompleted(object arg) {
            if ((this.GetICSNodeRootFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetICSNodeRootFolderCompleted(this, new GetICSNodeRootFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prometric.com/webservices/intelitest")]
    [System.Xml.Serialization.XmlRootAttribute("user", Namespace="http://www.prometric.com/webservices/intelitest", IsNullable=false)]
    public partial class User : System.Web.Services.Protocols.SoapHeader {
        
        private string currentContextIdField;
        
        private string userNameField;
        
        private string userIdField;
        
        private bool authenticatedField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string currentContextId {
            get {
                return this.currentContextIdField;
            }
            set {
                this.currentContextIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string userId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool authenticated {
            get {
                return this.authenticatedField;
            }
            set {
                this.authenticatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ICSNode))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prometric.com/webservices/intelitest")]
    public partial class Folder {
        
        private string folderNameField;
        
        private string folderIdField;
        
        private string folderTypeIdField;
        
        private string folderTypeNameField;
        
        private bool isLockedField;
        
        private bool isHiddenField;
        
        private bool isSystemField;
        
        private System.DateTime utcCreateDateTimeField;
        
        private System.DateTime utcLockedDateTimeField;
        
        private System.DateTime utcModifiedDateTimeField;
        
        private string createUserField;
        
        private string modifiedUserField;
        
        /// <remarks/>
        public string FolderName {
            get {
                return this.folderNameField;
            }
            set {
                this.folderNameField = value;
            }
        }
        
        /// <remarks/>
        public string FolderId {
            get {
                return this.folderIdField;
            }
            set {
                this.folderIdField = value;
            }
        }
        
        /// <remarks/>
        public string FolderTypeId {
            get {
                return this.folderTypeIdField;
            }
            set {
                this.folderTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public string FolderTypeName {
            get {
                return this.folderTypeNameField;
            }
            set {
                this.folderTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsLocked {
            get {
                return this.isLockedField;
            }
            set {
                this.isLockedField = value;
            }
        }
        
        /// <remarks/>
        public bool IsHidden {
            get {
                return this.isHiddenField;
            }
            set {
                this.isHiddenField = value;
            }
        }
        
        /// <remarks/>
        public bool IsSystem {
            get {
                return this.isSystemField;
            }
            set {
                this.isSystemField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime utcCreateDateTime {
            get {
                return this.utcCreateDateTimeField;
            }
            set {
                this.utcCreateDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime utcLockedDateTime {
            get {
                return this.utcLockedDateTimeField;
            }
            set {
                this.utcLockedDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime utcModifiedDateTime {
            get {
                return this.utcModifiedDateTimeField;
            }
            set {
                this.utcModifiedDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string CreateUser {
            get {
                return this.createUserField;
            }
            set {
                this.createUserField = value;
            }
        }
        
        /// <remarks/>
        public string ModifiedUser {
            get {
                return this.modifiedUserField;
            }
            set {
                this.modifiedUserField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prometric.com/webservices/intelitest")]
    public partial class ICSNode : Folder {
        
        private string iCSCodeField;
        
        private string iCSPathField;
        
        private string titleField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ICSCode {
            get {
                return this.iCSCodeField;
            }
            set {
                this.iCSCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ICSPath {
            get {
                return this.iCSPathField;
            }
            set {
                this.iCSPathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoadICSFolderCompletedEventHandler(object sender, LoadICSFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadICSFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadICSFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ICSNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ICSNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddICSNodeCompletedEventHandler(object sender, AddICSNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddICSNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddICSNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ICSNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ICSNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddICSNodeToParentCompletedEventHandler(object sender, AddICSNodeToParentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddICSNodeToParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddICSNodeToParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ICSNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ICSNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddICSNodeByPathCompletedEventHandler(object sender, AddICSNodeByPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddICSNodeByPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddICSNodeByPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ICSNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ICSNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetICSNodeRootFolderNameCompletedEventHandler(object sender, GetICSNodeRootFolderNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetICSNodeRootFolderNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetICSNodeRootFolderNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void EditIcsNodeCompletedEventHandler(object sender, EditIcsNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditIcsNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditIcsNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void MoveIcsNodeCompletedEventHandler(object sender, MoveIcsNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveIcsNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveIcsNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetICSNodeRootFolderCompletedEventHandler(object sender, GetICSNodeRootFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetICSNodeRootFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetICSNodeRootFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591